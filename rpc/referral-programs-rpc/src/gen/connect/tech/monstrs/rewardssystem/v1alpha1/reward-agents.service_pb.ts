// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file tech/monstrs/rewardssystem/v1alpha1/reward-agents.service.proto (package tech.monstrs.rewardssystem.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { Struct }                 from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

import { Query_ID }               from '../../queries/v1alpha1/queries_pb.js'
import { Query_Order }            from '../../queries/v1alpha1/queries_pb.js'
import { Query_Pager }            from '../../queries/v1alpha1/queries_pb.js'

/**
 * @generated from message tech.monstrs.rewardssystem.v1alpha1.RewardAgent
 */
export class RewardAgent extends Message<RewardAgent> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string code = 2;
   */
  code = ''

  /**
   * @generated from field: optional string parent_id = 3;
   */
  parentId?: string

  /**
   * @generated from field: google.protobuf.Struct metadata = 4;
   */
  metadata?: Struct

  constructor(data?: PartialMessage<RewardAgent>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewardssystem.v1alpha1.RewardAgent'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'parent_id', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: 'metadata', kind: 'message', T: Struct },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardAgent {
    return new RewardAgent().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardAgent {
    return new RewardAgent().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardAgent {
    return new RewardAgent().fromJsonString(jsonString, options)
  }

  static equals(
    a: RewardAgent | PlainMessage<RewardAgent> | undefined,
    b: RewardAgent | PlainMessage<RewardAgent> | undefined
  ): boolean {
    return proto3.util.equals(RewardAgent, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.v1alpha1.CreateRewardAgentRequest
 */
export class CreateRewardAgentRequest extends Message<CreateRewardAgentRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string referral_code = 2;
   */
  referralCode = ''

  constructor(data?: PartialMessage<CreateRewardAgentRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewardssystem.v1alpha1.CreateRewardAgentRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'referral_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateRewardAgentRequest {
    return new CreateRewardAgentRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateRewardAgentRequest {
    return new CreateRewardAgentRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateRewardAgentRequest {
    return new CreateRewardAgentRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateRewardAgentRequest | PlainMessage<CreateRewardAgentRequest> | undefined,
    b: CreateRewardAgentRequest | PlainMessage<CreateRewardAgentRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateRewardAgentRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.v1alpha1.CreateRewardAgentResponse
 */
export class CreateRewardAgentResponse extends Message<CreateRewardAgentResponse> {
  /**
   * @generated from field: tech.monstrs.rewardssystem.v1alpha1.RewardAgent result = 1;
   */
  result?: RewardAgent

  constructor(data?: PartialMessage<CreateRewardAgentResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewardssystem.v1alpha1.CreateRewardAgentResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: RewardAgent },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateRewardAgentResponse {
    return new CreateRewardAgentResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateRewardAgentResponse {
    return new CreateRewardAgentResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateRewardAgentResponse {
    return new CreateRewardAgentResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateRewardAgentResponse | PlainMessage<CreateRewardAgentResponse> | undefined,
    b: CreateRewardAgentResponse | PlainMessage<CreateRewardAgentResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateRewardAgentResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.v1alpha1.AddRewardAgentMetadataRequest
 */
export class AddRewardAgentMetadataRequest extends Message<AddRewardAgentMetadataRequest> {
  /**
   * @generated from field: string reward_agent_id = 1;
   */
  rewardAgentId = ''

  /**
   * @generated from field: google.protobuf.Struct metadata = 2;
   */
  metadata?: Struct

  constructor(data?: PartialMessage<AddRewardAgentMetadataRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewardssystem.v1alpha1.AddRewardAgentMetadataRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'reward_agent_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'metadata', kind: 'message', T: Struct },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AddRewardAgentMetadataRequest {
    return new AddRewardAgentMetadataRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AddRewardAgentMetadataRequest {
    return new AddRewardAgentMetadataRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AddRewardAgentMetadataRequest {
    return new AddRewardAgentMetadataRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: AddRewardAgentMetadataRequest | PlainMessage<AddRewardAgentMetadataRequest> | undefined,
    b: AddRewardAgentMetadataRequest | PlainMessage<AddRewardAgentMetadataRequest> | undefined
  ): boolean {
    return proto3.util.equals(AddRewardAgentMetadataRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.v1alpha1.AddRewardAgentMetadataResponse
 */
export class AddRewardAgentMetadataResponse extends Message<AddRewardAgentMetadataResponse> {
  /**
   * @generated from field: tech.monstrs.rewardssystem.v1alpha1.RewardAgent result = 1;
   */
  result?: RewardAgent

  constructor(data?: PartialMessage<AddRewardAgentMetadataResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewardssystem.v1alpha1.AddRewardAgentMetadataResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: RewardAgent },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AddRewardAgentMetadataResponse {
    return new AddRewardAgentMetadataResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AddRewardAgentMetadataResponse {
    return new AddRewardAgentMetadataResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AddRewardAgentMetadataResponse {
    return new AddRewardAgentMetadataResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: AddRewardAgentMetadataResponse | PlainMessage<AddRewardAgentMetadataResponse> | undefined,
    b: AddRewardAgentMetadataResponse | PlainMessage<AddRewardAgentMetadataResponse> | undefined
  ): boolean {
    return proto3.util.equals(AddRewardAgentMetadataResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.v1alpha1.ListRewardAgentsRequest
 */
export class ListRewardAgentsRequest extends Message<ListRewardAgentsRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.rewardssystem.v1alpha1.ListRewardAgentsRequest.RewardAgentsQuery query = 3;
   */
  query?: ListRewardAgentsRequest_RewardAgentsQuery

  constructor(data?: PartialMessage<ListRewardAgentsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewardssystem.v1alpha1.ListRewardAgentsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    { no: 3, name: 'query', kind: 'message', T: ListRewardAgentsRequest_RewardAgentsQuery },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRewardAgentsRequest {
    return new ListRewardAgentsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRewardAgentsRequest {
    return new ListRewardAgentsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardAgentsRequest {
    return new ListRewardAgentsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListRewardAgentsRequest | PlainMessage<ListRewardAgentsRequest> | undefined,
    b: ListRewardAgentsRequest | PlainMessage<ListRewardAgentsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListRewardAgentsRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.v1alpha1.ListRewardAgentsRequest.RewardAgentsQuery
 */
export class ListRewardAgentsRequest_RewardAgentsQuery extends Message<ListRewardAgentsRequest_RewardAgentsQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID id = 1;
   */
  id?: Query_ID

  constructor(data?: PartialMessage<ListRewardAgentsRequest_RewardAgentsQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewardssystem.v1alpha1.ListRewardAgentsRequest.RewardAgentsQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_ID },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRewardAgentsRequest_RewardAgentsQuery {
    return new ListRewardAgentsRequest_RewardAgentsQuery().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRewardAgentsRequest_RewardAgentsQuery {
    return new ListRewardAgentsRequest_RewardAgentsQuery().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardAgentsRequest_RewardAgentsQuery {
    return new ListRewardAgentsRequest_RewardAgentsQuery().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ListRewardAgentsRequest_RewardAgentsQuery
      | PlainMessage<ListRewardAgentsRequest_RewardAgentsQuery>
      | undefined,
    b:
      | ListRewardAgentsRequest_RewardAgentsQuery
      | PlainMessage<ListRewardAgentsRequest_RewardAgentsQuery>
      | undefined
  ): boolean {
    return proto3.util.equals(ListRewardAgentsRequest_RewardAgentsQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.v1alpha1.ListRewardAgentsResponse
 */
export class ListRewardAgentsResponse extends Message<ListRewardAgentsResponse> {
  /**
   * @generated from field: repeated tech.monstrs.rewardssystem.v1alpha1.RewardAgent reward_agents = 1;
   */
  rewardAgents: RewardAgent[] = []

  /**
   * @generated from field: bool has_next_page = 2;
   */
  hasNextPage = false

  constructor(data?: PartialMessage<ListRewardAgentsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewardssystem.v1alpha1.ListRewardAgentsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'reward_agents', kind: 'message', T: RewardAgent, repeated: true },
    { no: 2, name: 'has_next_page', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRewardAgentsResponse {
    return new ListRewardAgentsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRewardAgentsResponse {
    return new ListRewardAgentsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardAgentsResponse {
    return new ListRewardAgentsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListRewardAgentsResponse | PlainMessage<ListRewardAgentsResponse> | undefined,
    b: ListRewardAgentsResponse | PlainMessage<ListRewardAgentsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListRewardAgentsResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.v1alpha1.GetRewardAgentNetworkRequest
 */
export class GetRewardAgentNetworkRequest extends Message<GetRewardAgentNetworkRequest> {
  /**
   * @generated from field: string reward_agent_id = 1;
   */
  rewardAgentId = ''

  constructor(data?: PartialMessage<GetRewardAgentNetworkRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewardssystem.v1alpha1.GetRewardAgentNetworkRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'reward_agent_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetRewardAgentNetworkRequest {
    return new GetRewardAgentNetworkRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetRewardAgentNetworkRequest {
    return new GetRewardAgentNetworkRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetRewardAgentNetworkRequest {
    return new GetRewardAgentNetworkRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetRewardAgentNetworkRequest | PlainMessage<GetRewardAgentNetworkRequest> | undefined,
    b: GetRewardAgentNetworkRequest | PlainMessage<GetRewardAgentNetworkRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetRewardAgentNetworkRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.v1alpha1.GetRewardAgentNetworkResponse
 */
export class GetRewardAgentNetworkResponse extends Message<GetRewardAgentNetworkResponse> {
  /**
   * @generated from field: repeated tech.monstrs.rewardssystem.v1alpha1.RewardAgent reward_agents = 1;
   */
  rewardAgents: RewardAgent[] = []

  constructor(data?: PartialMessage<GetRewardAgentNetworkResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewardssystem.v1alpha1.GetRewardAgentNetworkResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'reward_agents', kind: 'message', T: RewardAgent, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetRewardAgentNetworkResponse {
    return new GetRewardAgentNetworkResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetRewardAgentNetworkResponse {
    return new GetRewardAgentNetworkResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetRewardAgentNetworkResponse {
    return new GetRewardAgentNetworkResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetRewardAgentNetworkResponse | PlainMessage<GetRewardAgentNetworkResponse> | undefined,
    b: GetRewardAgentNetworkResponse | PlainMessage<GetRewardAgentNetworkResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetRewardAgentNetworkResponse, a, b)
  }
}

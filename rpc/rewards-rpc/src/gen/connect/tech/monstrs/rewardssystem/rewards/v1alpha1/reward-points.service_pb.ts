// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file tech/monstrs/rewardssystem/rewards/v1alpha1/reward-points.service.proto (package tech.monstrs.rewardssystem.rewards.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

import { Query_ID }               from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Order }            from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Pager }            from '../../../queries/v1alpha1/queries_pb.js'

/**
 * @generated from message tech.monstrs.rewardssystem.rewards.v1alpha1.RewardPointsBalance
 */
export class RewardPointsBalance extends Message<RewardPointsBalance> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: double amount = 2;
   */
  amount = 0

  constructor(data?: PartialMessage<RewardPointsBalance>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewardssystem.rewards.v1alpha1.RewardPointsBalance'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardPointsBalance {
    return new RewardPointsBalance().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardPointsBalance {
    return new RewardPointsBalance().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): RewardPointsBalance {
    return new RewardPointsBalance().fromJsonString(jsonString, options)
  }

  static equals(
    a: RewardPointsBalance | PlainMessage<RewardPointsBalance> | undefined,
    b: RewardPointsBalance | PlainMessage<RewardPointsBalance> | undefined
  ): boolean {
    return proto3.util.equals(RewardPointsBalance, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.rewards.v1alpha1.ListRewardPointsBalancesRequest
 */
export class ListRewardPointsBalancesRequest extends Message<ListRewardPointsBalancesRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.rewardssystem.rewards.v1alpha1.ListRewardPointsBalancesRequest.RewardPointsBalancesQuery query = 3;
   */
  query?: ListRewardPointsBalancesRequest_RewardPointsBalancesQuery

  constructor(data?: PartialMessage<ListRewardPointsBalancesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewardssystem.rewards.v1alpha1.ListRewardPointsBalancesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    {
      no: 3,
      name: 'query',
      kind: 'message',
      T: ListRewardPointsBalancesRequest_RewardPointsBalancesQuery,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRewardPointsBalancesRequest {
    return new ListRewardPointsBalancesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRewardPointsBalancesRequest {
    return new ListRewardPointsBalancesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardPointsBalancesRequest {
    return new ListRewardPointsBalancesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListRewardPointsBalancesRequest | PlainMessage<ListRewardPointsBalancesRequest> | undefined,
    b: ListRewardPointsBalancesRequest | PlainMessage<ListRewardPointsBalancesRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListRewardPointsBalancesRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.rewards.v1alpha1.ListRewardPointsBalancesRequest.RewardPointsBalancesQuery
 */
export class ListRewardPointsBalancesRequest_RewardPointsBalancesQuery extends Message<ListRewardPointsBalancesRequest_RewardPointsBalancesQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID id = 1;
   */
  id?: Query_ID

  constructor(data?: PartialMessage<ListRewardPointsBalancesRequest_RewardPointsBalancesQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewardssystem.rewards.v1alpha1.ListRewardPointsBalancesRequest.RewardPointsBalancesQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_ID },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRewardPointsBalancesRequest_RewardPointsBalancesQuery {
    return new ListRewardPointsBalancesRequest_RewardPointsBalancesQuery().fromBinary(
      bytes,
      options
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRewardPointsBalancesRequest_RewardPointsBalancesQuery {
    return new ListRewardPointsBalancesRequest_RewardPointsBalancesQuery().fromJson(
      jsonValue,
      options
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardPointsBalancesRequest_RewardPointsBalancesQuery {
    return new ListRewardPointsBalancesRequest_RewardPointsBalancesQuery().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | ListRewardPointsBalancesRequest_RewardPointsBalancesQuery
      | PlainMessage<ListRewardPointsBalancesRequest_RewardPointsBalancesQuery>
      | undefined,
    b:
      | ListRewardPointsBalancesRequest_RewardPointsBalancesQuery
      | PlainMessage<ListRewardPointsBalancesRequest_RewardPointsBalancesQuery>
      | undefined
  ): boolean {
    return proto3.util.equals(ListRewardPointsBalancesRequest_RewardPointsBalancesQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewardssystem.rewards.v1alpha1.ListRewardPointsBalancesResponse
 */
export class ListRewardPointsBalancesResponse extends Message<ListRewardPointsBalancesResponse> {
  /**
   * @generated from field: repeated tech.monstrs.rewardssystem.rewards.v1alpha1.RewardPointsBalance reward_points_balances = 1;
   */
  rewardPointsBalances: RewardPointsBalance[] = []

  /**
   * @generated from field: bool has_next_page = 2;
   */
  hasNextPage = false

  constructor(data?: PartialMessage<ListRewardPointsBalancesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewardssystem.rewards.v1alpha1.ListRewardPointsBalancesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'reward_points_balances',
      kind: 'message',
      T: RewardPointsBalance,
      repeated: true,
    },
    { no: 2, name: 'has_next_page', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRewardPointsBalancesResponse {
    return new ListRewardPointsBalancesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRewardPointsBalancesResponse {
    return new ListRewardPointsBalancesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardPointsBalancesResponse {
    return new ListRewardPointsBalancesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ListRewardPointsBalancesResponse
      | PlainMessage<ListRewardPointsBalancesResponse>
      | undefined,
    b: ListRewardPointsBalancesResponse | PlainMessage<ListRewardPointsBalancesResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListRewardPointsBalancesResponse, a, b)
  }
}

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file tech/monstrs/rewards_system/v1alpha1/reward-operations.service.proto (package tech.monstrs.rewards_system.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { Timestamp }              from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

import { Query_ID }               from '../../queries/v1alpha1/queries_pb.js'
import { Query_Order }            from '../../queries/v1alpha1/queries_pb.js'
import { Query_Pager }            from '../../queries/v1alpha1/queries_pb.js'

/**
 * @generated from enum tech.monstrs.rewards_system.v1alpha1.RewardOperationStatus
 */
export enum RewardOperationStatus {
  /**
   * @generated from enum value: PENDING = 0;
   */
  PENDING = 0,

  /**
   * @generated from enum value: CONFIRMED = 1;
   */
  CONFIRMED = 1,

  /**
   * @generated from enum value: REJECTED = 2;
   */
  REJECTED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RewardOperationStatus)
proto3.util.setEnumType(
  RewardOperationStatus,
  'tech.monstrs.rewards_system.v1alpha1.RewardOperationStatus',
  [
    { no: 0, name: 'PENDING' },
    { no: 1, name: 'CONFIRMED' },
    { no: 2, name: 'REJECTED' },
  ]
)

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.RewardOperation
 */
export class RewardOperation extends Message<RewardOperation> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string reward_program_id = 2;
   */
  rewardProgramId = ''

  /**
   * @generated from field: string referrer_id = 3;
   */
  referrerId = ''

  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.RewardOperationStatus status = 4;
   */
  status = RewardOperationStatus.PENDING

  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.RewardOperation.Source source = 5;
   */
  source?: RewardOperation_Source

  /**
   * @generated from field: double amount = 6;
   */
  amount = 0

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<RewardOperation>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.RewardOperation'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'reward_program_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'referrer_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'status', kind: 'enum', T: proto3.getEnumType(RewardOperationStatus) },
    { no: 5, name: 'source', kind: 'message', T: RewardOperation_Source },
    { no: 6, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardOperation {
    return new RewardOperation().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardOperation {
    return new RewardOperation().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardOperation {
    return new RewardOperation().fromJsonString(jsonString, options)
  }

  static equals(
    a: RewardOperation | PlainMessage<RewardOperation> | undefined,
    b: RewardOperation | PlainMessage<RewardOperation> | undefined
  ): boolean {
    return proto3.util.equals(RewardOperation, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.RewardOperation.Source
 */
export class RewardOperation_Source extends Message<RewardOperation_Source> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string type = 2;
   */
  type = ''

  constructor(data?: PartialMessage<RewardOperation_Source>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.RewardOperation.Source'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'type', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): RewardOperation_Source {
    return new RewardOperation_Source().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): RewardOperation_Source {
    return new RewardOperation_Source().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): RewardOperation_Source {
    return new RewardOperation_Source().fromJsonString(jsonString, options)
  }

  static equals(
    a: RewardOperation_Source | PlainMessage<RewardOperation_Source> | undefined,
    b: RewardOperation_Source | PlainMessage<RewardOperation_Source> | undefined
  ): boolean {
    return proto3.util.equals(RewardOperation_Source, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.Reward
 */
export class Reward extends Message<Reward> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string operation_id = 2;
   */
  operationId = ''

  /**
   * @generated from field: string agent_id = 3;
   */
  agentId = ''

  /**
   * @generated from field: string referrer_id = 4;
   */
  referrerId = ''

  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.RewardOperationStatus status = 5;
   */
  status = RewardOperationStatus.PENDING

  /**
   * @generated from field: double amount = 6;
   */
  amount = 0

  /**
   * @generated from field: double profit = 7;
   */
  profit = 0

  /**
   * @generated from field: int32 percentage = 8;
   */
  percentage = 0

  /**
   * @generated from field: int32 level = 9;
   */
  level = 0

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 10;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<Reward>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.Reward'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'operation_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'agent_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'referrer_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'status', kind: 'enum', T: proto3.getEnumType(RewardOperationStatus) },
    { no: 6, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: 'profit', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: 'percentage', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: 'level', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reward {
    return new Reward().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reward {
    return new Reward().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reward {
    return new Reward().fromJsonString(jsonString, options)
  }

  static equals(
    a: Reward | PlainMessage<Reward> | undefined,
    b: Reward | PlainMessage<Reward> | undefined
  ): boolean {
    return proto3.util.equals(Reward, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.QuestReward
 */
export class QuestReward extends Message<QuestReward> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string recipient_id = 2;
   */
  recipientId = ''

  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.RewardOperationStatus status = 3;
   */
  status = RewardOperationStatus.PENDING

  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.QuestReward.Source source = 4;
   */
  source?: QuestReward_Source

  /**
   * @generated from field: double amount = 5;
   */
  amount = 0

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<QuestReward>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.QuestReward'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'recipient_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'status', kind: 'enum', T: proto3.getEnumType(RewardOperationStatus) },
    { no: 4, name: 'source', kind: 'message', T: QuestReward_Source },
    { no: 5, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestReward {
    return new QuestReward().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestReward {
    return new QuestReward().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestReward {
    return new QuestReward().fromJsonString(jsonString, options)
  }

  static equals(
    a: QuestReward | PlainMessage<QuestReward> | undefined,
    b: QuestReward | PlainMessage<QuestReward> | undefined
  ): boolean {
    return proto3.util.equals(QuestReward, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.QuestReward.Source
 */
export class QuestReward_Source extends Message<QuestReward_Source> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string type = 2;
   */
  type = ''

  constructor(data?: PartialMessage<QuestReward_Source>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.QuestReward.Source'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'type', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestReward_Source {
    return new QuestReward_Source().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestReward_Source {
    return new QuestReward_Source().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QuestReward_Source {
    return new QuestReward_Source().fromJsonString(jsonString, options)
  }

  static equals(
    a: QuestReward_Source | PlainMessage<QuestReward_Source> | undefined,
    b: QuestReward_Source | PlainMessage<QuestReward_Source> | undefined
  ): boolean {
    return proto3.util.equals(QuestReward_Source, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.Withdrawal
 */
export class Withdrawal extends Message<Withdrawal> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string owner_id = 2;
   */
  ownerId = ''

  /**
   * @generated from field: double amount = 3;
   */
  amount = 0

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<Withdrawal>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.Withdrawal'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'owner_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Withdrawal {
    return new Withdrawal().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Withdrawal {
    return new Withdrawal().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Withdrawal {
    return new Withdrawal().fromJsonString(jsonString, options)
  }

  static equals(
    a: Withdrawal | PlainMessage<Withdrawal> | undefined,
    b: Withdrawal | PlainMessage<Withdrawal> | undefined
  ): boolean {
    return proto3.util.equals(Withdrawal, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.CreateRewardOperationRequest
 */
export class CreateRewardOperationRequest extends Message<CreateRewardOperationRequest> {
  /**
   * @generated from field: string reward_program = 1;
   */
  rewardProgram = ''

  /**
   * @generated from field: string referrer_id = 2;
   */
  referrerId = ''

  /**
   * @generated from field: string source_id = 3;
   */
  sourceId = ''

  /**
   * @generated from field: string source_type = 4;
   */
  sourceType = ''

  /**
   * @generated from field: double amount = 5;
   */
  amount = 0

  constructor(data?: PartialMessage<CreateRewardOperationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.CreateRewardOperationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'reward_program', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'referrer_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'source_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'source_type', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateRewardOperationRequest {
    return new CreateRewardOperationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateRewardOperationRequest {
    return new CreateRewardOperationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateRewardOperationRequest {
    return new CreateRewardOperationRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateRewardOperationRequest | PlainMessage<CreateRewardOperationRequest> | undefined,
    b: CreateRewardOperationRequest | PlainMessage<CreateRewardOperationRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateRewardOperationRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.CreateRewardOperationResponse
 */
export class CreateRewardOperationResponse extends Message<CreateRewardOperationResponse> {
  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.RewardOperation result = 1;
   */
  result?: RewardOperation

  constructor(data?: PartialMessage<CreateRewardOperationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.CreateRewardOperationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: RewardOperation },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateRewardOperationResponse {
    return new CreateRewardOperationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateRewardOperationResponse {
    return new CreateRewardOperationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateRewardOperationResponse {
    return new CreateRewardOperationResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateRewardOperationResponse | PlainMessage<CreateRewardOperationResponse> | undefined,
    b: CreateRewardOperationResponse | PlainMessage<CreateRewardOperationResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateRewardOperationResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ConfirmRewardOperationRequest
 */
export class ConfirmRewardOperationRequest extends Message<ConfirmRewardOperationRequest> {
  /**
   * @generated from field: string reward_operation_id = 1;
   */
  rewardOperationId = ''

  constructor(data?: PartialMessage<ConfirmRewardOperationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ConfirmRewardOperationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'reward_operation_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ConfirmRewardOperationRequest {
    return new ConfirmRewardOperationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ConfirmRewardOperationRequest {
    return new ConfirmRewardOperationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ConfirmRewardOperationRequest {
    return new ConfirmRewardOperationRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ConfirmRewardOperationRequest | PlainMessage<ConfirmRewardOperationRequest> | undefined,
    b: ConfirmRewardOperationRequest | PlainMessage<ConfirmRewardOperationRequest> | undefined
  ): boolean {
    return proto3.util.equals(ConfirmRewardOperationRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ConfirmRewardOperationResponse
 */
export class ConfirmRewardOperationResponse extends Message<ConfirmRewardOperationResponse> {
  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.RewardOperation result = 1;
   */
  result?: RewardOperation

  constructor(data?: PartialMessage<ConfirmRewardOperationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ConfirmRewardOperationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: RewardOperation },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ConfirmRewardOperationResponse {
    return new ConfirmRewardOperationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ConfirmRewardOperationResponse {
    return new ConfirmRewardOperationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ConfirmRewardOperationResponse {
    return new ConfirmRewardOperationResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ConfirmRewardOperationResponse | PlainMessage<ConfirmRewardOperationResponse> | undefined,
    b: ConfirmRewardOperationResponse | PlainMessage<ConfirmRewardOperationResponse> | undefined
  ): boolean {
    return proto3.util.equals(ConfirmRewardOperationResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.CreateAndConfirmRewardOperationRequest
 */
export class CreateAndConfirmRewardOperationRequest extends Message<CreateAndConfirmRewardOperationRequest> {
  /**
   * @generated from field: string reward_program = 1;
   */
  rewardProgram = ''

  /**
   * @generated from field: string referrer_id = 2;
   */
  referrerId = ''

  /**
   * @generated from field: string source_id = 3;
   */
  sourceId = ''

  /**
   * @generated from field: string source_type = 4;
   */
  sourceType = ''

  /**
   * @generated from field: double amount = 5;
   */
  amount = 0

  constructor(data?: PartialMessage<CreateAndConfirmRewardOperationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewards_system.v1alpha1.CreateAndConfirmRewardOperationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'reward_program', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'referrer_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'source_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'source_type', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAndConfirmRewardOperationRequest {
    return new CreateAndConfirmRewardOperationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateAndConfirmRewardOperationRequest {
    return new CreateAndConfirmRewardOperationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAndConfirmRewardOperationRequest {
    return new CreateAndConfirmRewardOperationRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateAndConfirmRewardOperationRequest
      | PlainMessage<CreateAndConfirmRewardOperationRequest>
      | undefined,
    b:
      | CreateAndConfirmRewardOperationRequest
      | PlainMessage<CreateAndConfirmRewardOperationRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateAndConfirmRewardOperationRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.CreateAndConfirmRewardOperationResponse
 */
export class CreateAndConfirmRewardOperationResponse extends Message<CreateAndConfirmRewardOperationResponse> {
  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.RewardOperation result = 1;
   */
  result?: RewardOperation

  constructor(data?: PartialMessage<CreateAndConfirmRewardOperationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewards_system.v1alpha1.CreateAndConfirmRewardOperationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: RewardOperation },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAndConfirmRewardOperationResponse {
    return new CreateAndConfirmRewardOperationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateAndConfirmRewardOperationResponse {
    return new CreateAndConfirmRewardOperationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAndConfirmRewardOperationResponse {
    return new CreateAndConfirmRewardOperationResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateAndConfirmRewardOperationResponse
      | PlainMessage<CreateAndConfirmRewardOperationResponse>
      | undefined,
    b:
      | CreateAndConfirmRewardOperationResponse
      | PlainMessage<CreateAndConfirmRewardOperationResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateAndConfirmRewardOperationResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListRewardOperationsRequest
 */
export class ListRewardOperationsRequest extends Message<ListRewardOperationsRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.ListRewardOperationsRequest.RewardOperationsQuery query = 3;
   */
  query?: ListRewardOperationsRequest_RewardOperationsQuery

  constructor(data?: PartialMessage<ListRewardOperationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ListRewardOperationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    { no: 3, name: 'query', kind: 'message', T: ListRewardOperationsRequest_RewardOperationsQuery },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRewardOperationsRequest {
    return new ListRewardOperationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRewardOperationsRequest {
    return new ListRewardOperationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardOperationsRequest {
    return new ListRewardOperationsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListRewardOperationsRequest | PlainMessage<ListRewardOperationsRequest> | undefined,
    b: ListRewardOperationsRequest | PlainMessage<ListRewardOperationsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListRewardOperationsRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListRewardOperationsRequest.RewardOperationsQuery
 */
export class ListRewardOperationsRequest_RewardOperationsQuery extends Message<ListRewardOperationsRequest_RewardOperationsQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID id = 1;
   */
  id?: Query_ID

  constructor(data?: PartialMessage<ListRewardOperationsRequest_RewardOperationsQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewards_system.v1alpha1.ListRewardOperationsRequest.RewardOperationsQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_ID },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRewardOperationsRequest_RewardOperationsQuery {
    return new ListRewardOperationsRequest_RewardOperationsQuery().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRewardOperationsRequest_RewardOperationsQuery {
    return new ListRewardOperationsRequest_RewardOperationsQuery().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardOperationsRequest_RewardOperationsQuery {
    return new ListRewardOperationsRequest_RewardOperationsQuery().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | ListRewardOperationsRequest_RewardOperationsQuery
      | PlainMessage<ListRewardOperationsRequest_RewardOperationsQuery>
      | undefined,
    b:
      | ListRewardOperationsRequest_RewardOperationsQuery
      | PlainMessage<ListRewardOperationsRequest_RewardOperationsQuery>
      | undefined
  ): boolean {
    return proto3.util.equals(ListRewardOperationsRequest_RewardOperationsQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListRewardOperationsResponse
 */
export class ListRewardOperationsResponse extends Message<ListRewardOperationsResponse> {
  /**
   * @generated from field: repeated tech.monstrs.rewards_system.v1alpha1.RewardOperation reward_operations = 1;
   */
  rewardOperations: RewardOperation[] = []

  /**
   * @generated from field: bool has_next_page = 2;
   */
  hasNextPage = false

  constructor(data?: PartialMessage<ListRewardOperationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ListRewardOperationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'reward_operations', kind: 'message', T: RewardOperation, repeated: true },
    { no: 2, name: 'has_next_page', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRewardOperationsResponse {
    return new ListRewardOperationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRewardOperationsResponse {
    return new ListRewardOperationsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardOperationsResponse {
    return new ListRewardOperationsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListRewardOperationsResponse | PlainMessage<ListRewardOperationsResponse> | undefined,
    b: ListRewardOperationsResponse | PlainMessage<ListRewardOperationsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListRewardOperationsResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListRewardsRequest
 */
export class ListRewardsRequest extends Message<ListRewardsRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.ListRewardsRequest.RewardsQuery query = 3;
   */
  query?: ListRewardsRequest_RewardsQuery

  constructor(data?: PartialMessage<ListRewardsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ListRewardsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    { no: 3, name: 'query', kind: 'message', T: ListRewardsRequest_RewardsQuery },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRewardsRequest {
    return new ListRewardsRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRewardsRequest {
    return new ListRewardsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardsRequest {
    return new ListRewardsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListRewardsRequest | PlainMessage<ListRewardsRequest> | undefined,
    b: ListRewardsRequest | PlainMessage<ListRewardsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListRewardsRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListRewardsRequest.RewardsQuery
 */
export class ListRewardsRequest_RewardsQuery extends Message<ListRewardsRequest_RewardsQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID id = 1;
   */
  id?: Query_ID

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID agent_id = 2;
   */
  agentId?: Query_ID

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID operation_id = 3;
   */
  operationId?: Query_ID

  constructor(data?: PartialMessage<ListRewardsRequest_RewardsQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ListRewardsRequest.RewardsQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_ID },
    { no: 2, name: 'agent_id', kind: 'message', T: Query_ID },
    { no: 3, name: 'operation_id', kind: 'message', T: Query_ID },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRewardsRequest_RewardsQuery {
    return new ListRewardsRequest_RewardsQuery().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRewardsRequest_RewardsQuery {
    return new ListRewardsRequest_RewardsQuery().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardsRequest_RewardsQuery {
    return new ListRewardsRequest_RewardsQuery().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListRewardsRequest_RewardsQuery | PlainMessage<ListRewardsRequest_RewardsQuery> | undefined,
    b: ListRewardsRequest_RewardsQuery | PlainMessage<ListRewardsRequest_RewardsQuery> | undefined
  ): boolean {
    return proto3.util.equals(ListRewardsRequest_RewardsQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListRewardsResponse
 */
export class ListRewardsResponse extends Message<ListRewardsResponse> {
  /**
   * @generated from field: repeated tech.monstrs.rewards_system.v1alpha1.Reward rewards = 1;
   */
  rewards: Reward[] = []

  /**
   * @generated from field: bool has_next_page = 2;
   */
  hasNextPage = false

  constructor(data?: PartialMessage<ListRewardsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ListRewardsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'rewards', kind: 'message', T: Reward, repeated: true },
    { no: 2, name: 'has_next_page', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRewardsResponse {
    return new ListRewardsResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRewardsResponse {
    return new ListRewardsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRewardsResponse {
    return new ListRewardsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListRewardsResponse | PlainMessage<ListRewardsResponse> | undefined,
    b: ListRewardsResponse | PlainMessage<ListRewardsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListRewardsResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.CreateAndConfirmQuestRewardRequest
 */
export class CreateAndConfirmQuestRewardRequest extends Message<CreateAndConfirmQuestRewardRequest> {
  /**
   * @generated from field: string recipient_id = 1;
   */
  recipientId = ''

  /**
   * @generated from field: string source_id = 2;
   */
  sourceId = ''

  /**
   * @generated from field: string source_type = 3;
   */
  sourceType = ''

  /**
   * @generated from field: double amount = 4;
   */
  amount = 0

  constructor(data?: PartialMessage<CreateAndConfirmQuestRewardRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewards_system.v1alpha1.CreateAndConfirmQuestRewardRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'recipient_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'source_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'source_type', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAndConfirmQuestRewardRequest {
    return new CreateAndConfirmQuestRewardRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateAndConfirmQuestRewardRequest {
    return new CreateAndConfirmQuestRewardRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAndConfirmQuestRewardRequest {
    return new CreateAndConfirmQuestRewardRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateAndConfirmQuestRewardRequest
      | PlainMessage<CreateAndConfirmQuestRewardRequest>
      | undefined,
    b:
      | CreateAndConfirmQuestRewardRequest
      | PlainMessage<CreateAndConfirmQuestRewardRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateAndConfirmQuestRewardRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.CreateAndConfirmQuestRewardResponse
 */
export class CreateAndConfirmQuestRewardResponse extends Message<CreateAndConfirmQuestRewardResponse> {
  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.QuestReward result = 1;
   */
  result?: QuestReward

  constructor(data?: PartialMessage<CreateAndConfirmQuestRewardResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewards_system.v1alpha1.CreateAndConfirmQuestRewardResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: QuestReward },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAndConfirmQuestRewardResponse {
    return new CreateAndConfirmQuestRewardResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateAndConfirmQuestRewardResponse {
    return new CreateAndConfirmQuestRewardResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAndConfirmQuestRewardResponse {
    return new CreateAndConfirmQuestRewardResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateAndConfirmQuestRewardResponse
      | PlainMessage<CreateAndConfirmQuestRewardResponse>
      | undefined,
    b:
      | CreateAndConfirmQuestRewardResponse
      | PlainMessage<CreateAndConfirmQuestRewardResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateAndConfirmQuestRewardResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListQuestRewardsRequest
 */
export class ListQuestRewardsRequest extends Message<ListQuestRewardsRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.ListQuestRewardsRequest.QuestRewardsQuery query = 3;
   */
  query?: ListQuestRewardsRequest_QuestRewardsQuery

  constructor(data?: PartialMessage<ListQuestRewardsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ListQuestRewardsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    { no: 3, name: 'query', kind: 'message', T: ListQuestRewardsRequest_QuestRewardsQuery },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListQuestRewardsRequest {
    return new ListQuestRewardsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListQuestRewardsRequest {
    return new ListQuestRewardsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListQuestRewardsRequest {
    return new ListQuestRewardsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListQuestRewardsRequest | PlainMessage<ListQuestRewardsRequest> | undefined,
    b: ListQuestRewardsRequest | PlainMessage<ListQuestRewardsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListQuestRewardsRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListQuestRewardsRequest.QuestRewardsQuery
 */
export class ListQuestRewardsRequest_QuestRewardsQuery extends Message<ListQuestRewardsRequest_QuestRewardsQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID id = 1;
   */
  id?: Query_ID

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID recipient_id = 2;
   */
  recipientId?: Query_ID

  constructor(data?: PartialMessage<ListQuestRewardsRequest_QuestRewardsQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewards_system.v1alpha1.ListQuestRewardsRequest.QuestRewardsQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_ID },
    { no: 2, name: 'recipient_id', kind: 'message', T: Query_ID },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListQuestRewardsRequest_QuestRewardsQuery {
    return new ListQuestRewardsRequest_QuestRewardsQuery().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListQuestRewardsRequest_QuestRewardsQuery {
    return new ListQuestRewardsRequest_QuestRewardsQuery().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListQuestRewardsRequest_QuestRewardsQuery {
    return new ListQuestRewardsRequest_QuestRewardsQuery().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ListQuestRewardsRequest_QuestRewardsQuery
      | PlainMessage<ListQuestRewardsRequest_QuestRewardsQuery>
      | undefined,
    b:
      | ListQuestRewardsRequest_QuestRewardsQuery
      | PlainMessage<ListQuestRewardsRequest_QuestRewardsQuery>
      | undefined
  ): boolean {
    return proto3.util.equals(ListQuestRewardsRequest_QuestRewardsQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListQuestRewardsResponse
 */
export class ListQuestRewardsResponse extends Message<ListQuestRewardsResponse> {
  /**
   * @generated from field: repeated tech.monstrs.rewards_system.v1alpha1.QuestReward rewards = 1;
   */
  rewards: QuestReward[] = []

  /**
   * @generated from field: bool has_next_page = 2;
   */
  hasNextPage = false

  constructor(data?: PartialMessage<ListQuestRewardsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ListQuestRewardsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'rewards', kind: 'message', T: QuestReward, repeated: true },
    { no: 2, name: 'has_next_page', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListQuestRewardsResponse {
    return new ListQuestRewardsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListQuestRewardsResponse {
    return new ListQuestRewardsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListQuestRewardsResponse {
    return new ListQuestRewardsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListQuestRewardsResponse | PlainMessage<ListQuestRewardsResponse> | undefined,
    b: ListQuestRewardsResponse | PlainMessage<ListQuestRewardsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListQuestRewardsResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.CreateWithdrawalRequest
 */
export class CreateWithdrawalRequest extends Message<CreateWithdrawalRequest> {
  /**
   * @generated from field: string owner_id = 1;
   */
  ownerId = ''

  /**
   * @generated from field: double amount = 2;
   */
  amount = 0

  constructor(data?: PartialMessage<CreateWithdrawalRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.CreateWithdrawalRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'owner_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateWithdrawalRequest {
    return new CreateWithdrawalRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateWithdrawalRequest {
    return new CreateWithdrawalRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateWithdrawalRequest {
    return new CreateWithdrawalRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateWithdrawalRequest | PlainMessage<CreateWithdrawalRequest> | undefined,
    b: CreateWithdrawalRequest | PlainMessage<CreateWithdrawalRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateWithdrawalRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.CreateWithdrawalResponse
 */
export class CreateWithdrawalResponse extends Message<CreateWithdrawalResponse> {
  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.Withdrawal result = 1;
   */
  result?: Withdrawal

  constructor(data?: PartialMessage<CreateWithdrawalResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.CreateWithdrawalResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Withdrawal },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateWithdrawalResponse {
    return new CreateWithdrawalResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateWithdrawalResponse {
    return new CreateWithdrawalResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateWithdrawalResponse {
    return new CreateWithdrawalResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateWithdrawalResponse | PlainMessage<CreateWithdrawalResponse> | undefined,
    b: CreateWithdrawalResponse | PlainMessage<CreateWithdrawalResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateWithdrawalResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListWithdrawalsRequest
 */
export class ListWithdrawalsRequest extends Message<ListWithdrawalsRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.rewards_system.v1alpha1.ListWithdrawalsRequest.WithdrawalsQuery query = 3;
   */
  query?: ListWithdrawalsRequest_WithdrawalsQuery

  constructor(data?: PartialMessage<ListWithdrawalsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ListWithdrawalsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    { no: 3, name: 'query', kind: 'message', T: ListWithdrawalsRequest_WithdrawalsQuery },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListWithdrawalsRequest {
    return new ListWithdrawalsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListWithdrawalsRequest {
    return new ListWithdrawalsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListWithdrawalsRequest {
    return new ListWithdrawalsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListWithdrawalsRequest | PlainMessage<ListWithdrawalsRequest> | undefined,
    b: ListWithdrawalsRequest | PlainMessage<ListWithdrawalsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListWithdrawalsRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListWithdrawalsRequest.WithdrawalsQuery
 */
export class ListWithdrawalsRequest_WithdrawalsQuery extends Message<ListWithdrawalsRequest_WithdrawalsQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID id = 1;
   */
  id?: Query_ID

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID owner_id = 2;
   */
  ownerId?: Query_ID

  constructor(data?: PartialMessage<ListWithdrawalsRequest_WithdrawalsQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.rewards_system.v1alpha1.ListWithdrawalsRequest.WithdrawalsQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_ID },
    { no: 2, name: 'owner_id', kind: 'message', T: Query_ID },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListWithdrawalsRequest_WithdrawalsQuery {
    return new ListWithdrawalsRequest_WithdrawalsQuery().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListWithdrawalsRequest_WithdrawalsQuery {
    return new ListWithdrawalsRequest_WithdrawalsQuery().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListWithdrawalsRequest_WithdrawalsQuery {
    return new ListWithdrawalsRequest_WithdrawalsQuery().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ListWithdrawalsRequest_WithdrawalsQuery
      | PlainMessage<ListWithdrawalsRequest_WithdrawalsQuery>
      | undefined,
    b:
      | ListWithdrawalsRequest_WithdrawalsQuery
      | PlainMessage<ListWithdrawalsRequest_WithdrawalsQuery>
      | undefined
  ): boolean {
    return proto3.util.equals(ListWithdrawalsRequest_WithdrawalsQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.rewards_system.v1alpha1.ListWithdrawalsResponse
 */
export class ListWithdrawalsResponse extends Message<ListWithdrawalsResponse> {
  /**
   * @generated from field: repeated tech.monstrs.rewards_system.v1alpha1.Withdrawal withdrawals = 1;
   */
  withdrawals: Withdrawal[] = []

  /**
   * @generated from field: bool has_next_page = 2;
   */
  hasNextPage = false

  constructor(data?: PartialMessage<ListWithdrawalsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rewards_system.v1alpha1.ListWithdrawalsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'withdrawals', kind: 'message', T: Withdrawal, repeated: true },
    { no: 2, name: 'has_next_page', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListWithdrawalsResponse {
    return new ListWithdrawalsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListWithdrawalsResponse {
    return new ListWithdrawalsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListWithdrawalsResponse {
    return new ListWithdrawalsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListWithdrawalsResponse | PlainMessage<ListWithdrawalsResponse> | undefined,
    b: ListWithdrawalsResponse | PlainMessage<ListWithdrawalsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListWithdrawalsResponse, a, b)
  }
}
